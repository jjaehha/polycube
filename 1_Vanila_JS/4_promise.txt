4. promise에 대해 서술하고, promise를 사용할 때 주의할 점을 2가지 이상 서술하시오.

    promise는 특정 코드의 실행이 완료될 때까지 기다리지 않고 다음 코드를 먼저 수행하는 작업(비동기 작업)을 더 효율적으로 다룰 수 있개 해주는 객체다.
    비동기 작업이 성공적으로 완료되거나 실패했을때의 결과를 나타내며,
    성공 또는 실패 이후에 특정 작업을 수행할 수 있게 해준다.

    Promise의 주요 특징은 다음과 같다:

        상태(State): Promise는 세 가지 상태를 가질 수 있다.

            대기(Pending): 비동기 작업이 완료되지 않은 상태이다.
            
                ex)
                    new Promise(function(resolve, reject) {
                        ...
                    })
                    // new Promise() 메서드를 호출하면 대기 상태가 된다.
                    // 이때 콜백 함수를 선언할 수 있고 인자는 resolve, reject 이다.
            
            =============================================================================

            이행(Fulfilled): 비동기 작업이 성공적으로 완료된 상태이다.
            
                이행 상태가 되면 아래와 같이 then()을 이용하여 처리 결과 값을 받을 수 있다
                ex)
                    const getData() => {
                        return new Promise(function(resolve, reject) {
                            var data = 100;
                            resolve(data);
                        });
                    }

                    getData().then(function(resolvedData) {
                        console.log(resolvedData);
                    });
                    // 결과:
                    // 100
                    
                    // 프로미스의 '이행' 상태를 다르게 본다면 '완료'와 비슷하다고 볼 수 있다.

            =============================================================================

            거부(Rejected): 비동기 작업이 실패한 상태이다.

                ex)
                    function getData() {
                        return new Promise(function(resolve, reject) {
                            reject(new Error("404 Not Found"));
                        });
                    }

                    getData().then().catch(function(err) {
                        console.log(err);
                    });
                    // 결과:
                    // Error: 404 Not Found
                    
                    // 실패 상태가 되면 실패한 이유를 catch()로 받을 수 있습니다.

            =============================================================================


        체이닝(Chaining): 여러 개의 Promise를 연결하여 순차적으로 실행할 수 있다. 이를 통해 가독성을 높일 수 있다.

            ex)
                function getData() {
                    return new Promise({
                        ...
                    });
                }

                // then() 으로 여러 개의 프로미스를 연결한 형식
                getData()
                    .then(function(data) {
                        ...
                    })
                    .then(function() {
                        ...
                    })
                    .then(function() {
                        ...
                    });

        에러 핸들링(Error Handling): .catch() 또는 try ~ catch를 사용하여 Promise 체인 중에 발생한 오류를 처리할 수 있다.

            ex)
                function getData() {
                    return new Promise(function(resolve, reject) {
                        reject('failed');
                    });
                }

                // 1. then()의 두 번째 인자로 에러를 처리하는 코드
                getData().then(function() {
                    ...
                }, function(err) {
                    console.log(err);
                });

                // 2. catch()로 에러를 처리하는 코드
                getData().then().catch(function(err) {
                    console.log(err);
                });
    
    Promise 사용시 주의할점

    1. Promise 체이닝 중 에러 핸들링
        
        하나의 Promise에서라도 에러가 발생하면 .catch() 블록에서 처리된다.
        하지만 에러를 적절히 처리하지 않으면 프로미스 체인이 중단될 수 있다.
        따라서 중요한 작업을 수행하는 Promise 체인에서는 항상 .catch() 블록을 추가하여 에러를 처리해야 한다.

        ex)
            getData()
                .then(...)
                .then(...)
                .catch(error => {
                    console.error('Error:', error);
                });

    2. Promise 반환
        Promise 체이닝 중에 각 .then() 블록에서는 반드시 Promise를 반환해야 한다.
        그렇지 않으면 이전에 반환한 값이 다음 .then() 블록으로 전달되지 않을 수 있다.
        만약 비동기 작업이 필요하지 않은 경우에도 항상 Promise를 반환해야 한다.

        ex)
            getData()
                .then(result => {
                    // 값 반환
                return result;
                })
                .then(result2 => {
                    // Promise 반환
                return getData(result2);
                });

    3. Async/Await와 함께 사용할 때의 주의점

        Async 함수 내에서 Promise를 반환할 때는 항상 해당 Promise를 await 키워드와 함께 사용해야 합니다.
        이렇게 하지 않으면 비동기 작업이 완료되기를 기다리지 않고 다음 코드가 실행될 수 있습니다.

        ex)
            async function example() {
                const data = await getData();
                console.log(data);
            }

